local
path
=
require(
(
'path'
)
)
spec(
(
'dedup'
)
,
function()
assert
.are
.equal(
(
'a'
)
,
path
.dedup(
(
'a'
)
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.dedup(
(
'/a'
)
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.dedup(
(
'///a'
)
)
)
assert
.are
.equal(
(
'/a/b/c'
)
,
path
.dedup(
(
'//a/b///c'
)
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.dedup(
(
'a/'
)
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.dedup(
(
'a///'
)
)
)
assert
.are
.equal(
(
'a/b/c/'
)
,
path
.dedup(
(
'a/b///c//'
)
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.dedup(
(
'/a/'
)
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.dedup(
(
'/a///'
)
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.dedup(
(
'///a/'
)
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.dedup(
(
'/a/b///c//'
)
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.dedup(
(
'//a/b///c/'
)
)
)
end
)
describe(
(
'format'
)
,
function()
spec(
(
'start = false, end = false'
)
,
function()
assert
.are
.equal(
(
'a'
)
,
path
.format(
(
'a'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a'
)
,
path
.format(
(
'/a'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a'
)
,
path
.format(
(
'///a'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a/b/c'
)
,
path
.format(
(
'//a/b///c'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a'
)
,
path
.format(
(
'a/'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a'
)
,
path
.format(
(
'a///'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a/b/c'
)
,
path
.format(
(
'a/b///c//'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a'
)
,
path
.format(
(
'/a/'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a'
)
,
path
.format(
(
'/a///'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a'
)
,
path
.format(
(
'///a/'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a/b/c'
)
,
path
.format(
(
'/a/b///c//'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a/b/c'
)
,
path
.format(
(
'//a/b///c/'
)
,
false
,
false
)
)
end
)
spec(
(
'start = true, end = false'
)
,
function()
assert
.are
.equal(
(
'/a'
)
,
path
.format(
(
'a'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.format(
(
'/a'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.format(
(
'///a'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a/b/c'
)
,
path
.format(
(
'//a/b///c'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.format(
(
'a/'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.format(
(
'a///'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a/b/c'
)
,
path
.format(
(
'a/b///c//'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.format(
(
'/a/'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.format(
(
'/a///'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.format(
(
'///a/'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a/b/c'
)
,
path
.format(
(
'/a/b///c//'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a/b/c'
)
,
path
.format(
(
'//a/b///c/'
)
,
true
,
false
)
)
end
)
spec(
(
'start = false, end = true'
)
,
function()
assert
.are
.equal(
(
'a/'
)
,
path
.format(
(
'a'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.format(
(
'/a'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.format(
(
'///a'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/b/c/'
)
,
path
.format(
(
'//a/b///c'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.format(
(
'a/'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.format(
(
'a///'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/b/c/'
)
,
path
.format(
(
'a/b///c//'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.format(
(
'/a/'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.format(
(
'/a///'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.format(
(
'///a/'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/b/c/'
)
,
path
.format(
(
'/a/b///c//'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/b/c/'
)
,
path
.format(
(
'//a/b///c/'
)
,
false
,
true
)
)
end
)
spec(
(
'start = true, end = true'
)
,
function()
assert
.are
.equal(
(
'/a/'
)
,
path
.format(
(
'a'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.format(
(
'/a'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.format(
(
'///a'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.format(
(
'//a/b///c'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.format(
(
'a/'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.format(
(
'a///'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.format(
(
'a/b///c//'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.format(
(
'/a/'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.format(
(
'/a///'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.format(
(
'///a/'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.format(
(
'/a/b///c//'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.format(
(
'//a/b///c/'
)
,
true
,
true
)
)
end
)
end
)
describe(
(
'trim'
)
,
function()
spec(
(
'start = false, end = false'
)
,
function()
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'a'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.trim(
(
'/a'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.trim(
(
'///a'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a/b/c'
)
,
path
.trim(
(
'//a/b///c'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.trim(
(
'a/'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.trim(
(
'a///'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a/b/c/'
)
,
path
.trim(
(
'a/b///c//'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.trim(
(
'/a/'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.trim(
(
'/a///'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.trim(
(
'///a/'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.trim(
(
'/a/b///c//'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.trim(
(
'//a/b///c/'
)
,
false
,
false
)
)
end
)
spec(
(
'start = true, end = false'
)
,
function()
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'a'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'/a'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'///a'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'a/b/c'
)
,
path
.trim(
(
'//a/b///c'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.trim(
(
'a/'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.trim(
(
'a///'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'a/b/c/'
)
,
path
.trim(
(
'a/b///c//'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.trim(
(
'/a/'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.trim(
(
'/a///'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.trim(
(
'///a/'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'a/b/c/'
)
,
path
.trim(
(
'/a/b///c//'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'a/b/c/'
)
,
path
.trim(
(
'//a/b///c/'
)
,
true
,
false
)
)
end
)
spec(
(
'start = false, end = true'
)
,
function()
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'a'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.trim(
(
'/a'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.trim(
(
'///a'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a/b/c'
)
,
path
.trim(
(
'//a/b///c'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'a/'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'a///'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/b/c'
)
,
path
.trim(
(
'a/b///c//'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.trim(
(
'/a/'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.trim(
(
'/a///'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.trim(
(
'///a/'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a/b/c'
)
,
path
.trim(
(
'/a/b///c//'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a/b/c'
)
,
path
.trim(
(
'//a/b///c/'
)
,
false
,
true
)
)
end
)
spec(
(
'start = true, end = true'
)
,
function()
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'a'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'/a'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'///a'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'a/b/c'
)
,
path
.trim(
(
'//a/b///c'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'a/'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'a///'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'a/b/c'
)
,
path
.trim(
(
'a/b///c//'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'/a/'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'/a///'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'a'
)
,
path
.trim(
(
'///a/'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'a/b/c'
)
,
path
.trim(
(
'/a/b///c//'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'a/b/c'
)
,
path
.trim(
(
'//a/b///c/'
)
,
true
,
true
)
)
end
)
end
)
describe(
(
'pad'
)
,
function()
spec(
(
'start = false, end = false'
)
,
function()
assert
.are
.equal(
(
'a'
)
,
path
.pad(
(
'a'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.pad(
(
'/a'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.pad(
(
'///a'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a/b/c'
)
,
path
.pad(
(
'//a/b///c'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.pad(
(
'a/'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.pad(
(
'a///'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'a/b/c/'
)
,
path
.pad(
(
'a/b///c//'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'/a/'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'/a///'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'///a/'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.pad(
(
'/a/b///c//'
)
,
false
,
false
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.pad(
(
'//a/b///c/'
)
,
false
,
false
)
)
end
)
spec(
(
'start = true, end = false'
)
,
function()
assert
.are
.equal(
(
'/a'
)
,
path
.pad(
(
'a'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.pad(
(
'/a'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.pad(
(
'///a'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a/b/c'
)
,
path
.pad(
(
'//a/b///c'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'a/'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'a///'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.pad(
(
'a/b///c//'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'/a/'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'/a///'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'///a/'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.pad(
(
'/a/b///c//'
)
,
true
,
false
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.pad(
(
'//a/b///c/'
)
,
true
,
false
)
)
end
)
spec(
(
'start = false, end = true'
)
,
function()
assert
.are
.equal(
(
'a/'
)
,
path
.pad(
(
'a'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'/a'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'///a'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.pad(
(
'//a/b///c'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.pad(
(
'a/'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.pad(
(
'a///'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'a/b/c/'
)
,
path
.pad(
(
'a/b///c//'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'/a/'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'/a///'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'///a/'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.pad(
(
'/a/b///c//'
)
,
false
,
true
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.pad(
(
'//a/b///c/'
)
,
false
,
true
)
)
end
)
spec(
(
'start = true, end = true'
)
,
function()
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'a'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'/a'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'///a'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.pad(
(
'//a/b///c'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'a/'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'a///'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.pad(
(
'a/b///c//'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'/a/'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'/a///'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.pad(
(
'///a/'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.pad(
(
'/a/b///c//'
)
,
true
,
true
)
)
assert
.are
.equal(
(
'/a/b/c/'
)
,
path
.pad(
(
'//a/b///c/'
)
,
true
,
true
)
)
end
)
end
)
spec(
(
'join'
)
,
function()
assert
.are
.equal(
(
''
)
,
path
.join(
)
)
assert
.are
.equal(
(
'a'
)
,
path
.join(
(
'a'
)
)
)
assert
.are
.equal(
(
'/a'
)
,
path
.join(
(
'/a'
)
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.join(
(
'a/'
)
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.join(
(
'/a/'
)
)
)
assert
.are
.equal(
(
'a/b'
)
,
path
.join(
(
'a'
)
,
(
'b'
)
)
)
assert
.are
.equal(
(
'/a/b'
)
,
path
.join(
(
'/a'
)
,
(
'b'
)
)
)
assert
.are
.equal(
(
'a/b'
)
,
path
.join(
(
'a/'
)
,
(
'b'
)
)
)
assert
.are
.equal(
(
'/a/b'
)
,
path
.join(
(
'/a/'
)
,
(
'b'
)
)
)
assert
.are
.equal(
(
'a/b'
)
,
path
.join(
(
'a'
)
,
(
'/b'
)
)
)
assert
.are
.equal(
(
'/a/b'
)
,
path
.join(
(
'/a'
)
,
(
'/b'
)
)
)
assert
.are
.equal(
(
'a/b'
)
,
path
.join(
(
'a/'
)
,
(
'/b'
)
)
)
assert
.are
.equal(
(
'/a/b'
)
,
path
.join(
(
'/a/'
)
,
(
'/b'
)
)
)
assert
.are
.equal(
(
'a/b/'
)
,
path
.join(
(
'a'
)
,
(
'b/'
)
)
)
assert
.are
.equal(
(
'/a/b/'
)
,
path
.join(
(
'/a'
)
,
(
'b/'
)
)
)
assert
.are
.equal(
(
'a/b/'
)
,
path
.join(
(
'a/'
)
,
(
'b/'
)
)
)
assert
.are
.equal(
(
'/a/b/'
)
,
path
.join(
(
'/a/'
)
,
(
'b/'
)
)
)
assert
.are
.equal(
(
'a/b/'
)
,
path
.join(
(
'a'
)
,
(
'/b/'
)
)
)
assert
.are
.equal(
(
'/a/b/'
)
,
path
.join(
(
'/a'
)
,
(
'/b/'
)
)
)
assert
.are
.equal(
(
'a/b/'
)
,
path
.join(
(
'a/'
)
,
(
'/b/'
)
)
)
assert
.are
.equal(
(
'/a/b/'
)
,
path
.join(
(
'/a/'
)
,
(
'/b/'
)
)
)
assert
.are
.equal(
(
'a/b/c'
)
,
path
.join(
(
'a'
)
,
(
'//b/'
)
,
(
'//c'
)
)
)
end
)
spec(
(
'basename'
)
,
function()
assert
.are
.equal(
(
'a'
)
,
path
.basename(
(
'a'
)
)
)
assert
.are
.equal(
(
'a'
)
,
path
.basename(
(
'/a'
)
)
)
assert
.are
.equal(
(
''
)
,
path
.basename(
(
'a/'
)
)
)
assert
.are
.equal(
(
''
)
,
path
.basename(
(
'/a/'
)
)
)
assert
.are
.equal(
(
'b'
)
,
path
.basename(
(
'a/b'
)
)
)
assert
.are
.equal(
(
'b'
)
,
path
.basename(
(
'/a/b'
)
)
)
assert
.are
.equal(
(
''
)
,
path
.basename(
(
'a/b/'
)
)
)
assert
.are
.equal(
(
''
)
,
path
.basename(
(
'/a/b/'
)
)
)
end
)
spec(
(
'dirname'
)
,
function()
assert
.are
.equal(
(
''
)
,
path
.dirname(
(
'a'
)
)
)
assert
.are
.equal(
(
'/'
)
,
path
.dirname(
(
'/a'
)
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.dirname(
(
'a/'
)
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.dirname(
(
'/a/'
)
)
)
assert
.are
.equal(
(
'a/'
)
,
path
.dirname(
(
'a/b'
)
)
)
assert
.are
.equal(
(
'/a/'
)
,
path
.dirname(
(
'/a/b'
)
)
)
assert
.are
.equal(
(
'a/b/'
)
,
path
.dirname(
(
'a/b/'
)
)
)
assert
.are
.equal(
(
'/a/b/'
)
,
path
.dirname(
(
'/a/b/'
)
)
)
end
)
-- Compiled with Erde 0.5-1
-- __ERDE_COMPILED__